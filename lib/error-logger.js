// Generated by CoffeeScript 1.6.1
(function() {
  var ConsoleLogger, DebugLogger, ErrorLoggerController, Logger, NetLogger,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ErrorLoggerController = (function() {

    ErrorLoggerController.prototype.config = {
      logger: null,
      propagateErrors: false,
      onErrorFn: null,
      sendOnDomReady: true,
      sendDelay: 2000
    };

    ErrorLoggerController.prototype.setConfig = function(config) {
      var prop, _results;
      if (config == null) {
        return;
      }
      _results = [];
      for (prop in config) {
        if (config.hasOwnProperty(prop)) {
          _results.push(this.config[prop] = config[prop]);
        }
      }
      return _results;
    };

    function ErrorLoggerController(config) {
      var _this = this;
      this.errorHandler = function(msg, url, line) {
        return ErrorLoggerController.prototype.errorHandler.apply(_this, arguments);
      };
      this.afterDomReady = function() {
        return ErrorLoggerController.prototype.afterDomReady.apply(_this, arguments);
      };
      this.initSending = function() {
        return ErrorLoggerController.prototype.initSending.apply(_this, arguments);
      };
      this.setConfig(config);
      if (this.config.logger != null) {
        this.init();
      }
    }

    ErrorLoggerController.prototype.init = function() {
      window.onerror = this.errorHandler;
      if (this.config.sendOnDomReady) {
        $(window).load(this.afterDomReady);
      }
      return this.initSending();
    };

    ErrorLoggerController.prototype.initSending = function() {
      var run,
        _this = this;
      run = function() {
        if (!_this.config.sendOnDomReady) {
          _this.send();
        }
        return setTimeout(run, _this.config.sendDelay);
      };
      return setTimeout(run, this.config.sendDelay);
    };

    ErrorLoggerController.prototype.send = function() {
      if (this.config.logger.errorList.length > 0) {
        this.config.logger.send();
        return this.config.logger.clear();
      }
    };

    ErrorLoggerController.prototype.afterDomReady = function() {
      this.send();
      return this.config.sendOnDomReady = false;
    };

    ErrorLoggerController.prototype.errorHandler = function(msg, url, line) {
      var errorObj;
      errorObj = {
        message: msg,
        url: url,
        line: line
      };
      if ((this.config.onError != null) && typeof this.config.onError === 'function') {
        this.config.onError(errorObj);
      }
      this.config.logger.push(errorObj);
      return !this.config.propagateErrors;
    };

    return ErrorLoggerController;

  })();

  Logger = (function() {

    function Logger() {}

    Logger.prototype.errorList = [];

    Logger.prototype.lastError = function() {
      return this.errorList[this.errorList.length - 1];
    };

    Logger.prototype.browser = window.navigator.userAgent;

    Logger.prototype.push = function(errorObj) {
      this.errorList.push(errorObj);
      return this.added();
    };

    Logger.prototype.added = function() {
      return null;
    };

    Logger.prototype.clear = function() {
      return this.errorList = [];
    };

    return Logger;

  })();

  ConsoleLogger = (function(_super) {

    __extends(ConsoleLogger, _super);

    function ConsoleLogger() {
      return ConsoleLogger.__super__.constructor.apply(this, arguments);
    }

    ConsoleLogger.prototype.added = function() {
      return console.log(this.lastError);
    };

    return ConsoleLogger;

  })(Logger);

  DebugLogger = (function(_super) {

    __extends(DebugLogger, _super);

    function DebugLogger(options) {
      if (options == null) {
        options = {
          el: '',
          displayEach: false
        };
      }
      this.el = options.el;
      this.displayEach = options.displayEach;
    }

    DebugLogger.prototype.added = function() {
      if (this.displayEach) {
        return this.display(this.lastError());
      }
    };

    DebugLogger.prototype.send = function() {
      var error, _i, _len, _ref, _results;
      if (!this.displayEach) {
        _ref = this.errorList;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          error = _ref[_i];
          _results.push(this.display(error));
        }
        return _results;
      }
    };

    DebugLogger.prototype.display = function(error) {
      return $(this.el).append("<p>message: " + error.message + " <br />url: " + error.url + ", lineNumber: " + error.line + "<br /> browser: " + this.browser);
    };

    return DebugLogger;

  })(Logger);

  NetLogger = (function(_super) {

    __extends(NetLogger, _super);

    function NetLogger(options) {
      if (options == null) {
        options = {
          url: null,
          method: 'POST'
        };
      }
      this.url = options.url;
      this.method = options.method;
    }

    NetLogger.prototype.jsonToSend = function() {
      var objToSend;
      objToSend = {
        browser: this.browser,
        errors: this.errorList
      };
      return JSON.stringify(objToSend);
    };

    NetLogger.prototype.send = function() {
      var xhr;
      if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest();
        xhr.open(this.method, this.url, true);
        xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
        return xhr.send(this.jsonToSend());
      }
    };

    return NetLogger;

  })(Logger);

}).call(this);
