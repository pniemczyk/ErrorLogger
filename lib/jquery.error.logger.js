// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($) {
    var ConsoleLogger, DebugLogger, Logger, NetLogger, errorLogger, _ref;
    Logger = (function() {
      function Logger() {}

      Logger.prototype.errorList = [];

      Logger.prototype.lastError = function() {
        return this.errorList[this.errorList.length - 1];
      };

      Logger.prototype.browser = window.navigator.userAgent;

      Logger.prototype.push = function(errorObj) {
        this.errorList.push(errorObj);
        return this.added();
      };

      Logger.prototype.added = function() {
        return null;
      };

      Logger.prototype.clear = function() {
        return this.errorList = [];
      };

      return Logger;

    })();
    ConsoleLogger = (function(_super) {
      __extends(ConsoleLogger, _super);

      function ConsoleLogger() {
        _ref = ConsoleLogger.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ConsoleLogger.prototype.added = function() {
        return console.log(this.lastError);
      };

      return ConsoleLogger;

    })(Logger);
    DebugLogger = (function(_super) {
      __extends(DebugLogger, _super);

      function DebugLogger(options) {
        if (options == null) {
          options = {
            el: '',
            displayEach: false
          };
        }
        this.el = options.el;
        this.displayEach = options.displayEach;
      }

      DebugLogger.prototype.added = function() {
        if (this.displayEach) {
          return this.display(this.lastError());
        }
      };

      DebugLogger.prototype.send = function() {
        var error, _i, _len, _ref1, _results;
        if (!this.displayEach) {
          _ref1 = this.errorList;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            error = _ref1[_i];
            _results.push(this.display(error));
          }
          return _results;
        }
      };

      DebugLogger.prototype.display = function(error) {
        return $(this.el).append("<p>message: " + error.message + " <br />url: " + error.url + ", lineNumber: " + error.line + "<br /> browser: " + this.browser);
      };

      return DebugLogger;

    })(Logger);
    NetLogger = (function(_super) {
      __extends(NetLogger, _super);

      function NetLogger(options) {
        if (options == null) {
          options = {
            url: null,
            method: 'POST'
          };
        }
        this.url = options.url;
        this.method = options.method;
      }

      NetLogger.prototype.jsonToSend = function() {
        var objToSend;
        objToSend = {
          browser: this.browser,
          errors: this.errorList
        };
        return JSON.stringify(objToSend);
      };

      NetLogger.prototype.send = function() {
        var xhr;
        if (window.XMLHttpRequest) {
          xhr = new XMLHttpRequest();
          xhr.open(this.method, this.url, true);
          xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
          return xhr.send(this.jsonToSend());
        }
      };

      return NetLogger;

    })(Logger);
    errorLogger = function(options) {
      var afterDomReady, errorHandler, initSending, selectLogger, send,
        _this = this;
      this.version = '1.0.0';
      this.options = {};
      selectLogger = function() {
        if (typeof _this.options.logger === 'string') {
          switch (_this.options.logger) {
            case 'debug':
              return new DebugLogger(_this.options.debugLoggerOptions);
            case 'net':
              return new NetLogger(_this.options.netLoggerOptions);
            default:
              return new ConsoleLogger();
          }
        } else {
          return _this.options.logger;
        }
      };
      initSending = function() {
        var run;
        run = function() {
          if (!_this.options.sendOnDomReady) {
            send();
          }
          return setTimeout(run, _this.options.sendDelay);
        };
        return setTimeout(run, _this.options.sendDelay);
      };
      send = function() {
        if (_this.logger.errorList.length > 0) {
          if ((_this.options.beforeSendFn != null) && typeof _this.options.beforeSendFn === 'function') {
            _this.options.beforeSendFn();
          }
          _this.logger.send();
          _this.logger.clear();
          if ((_this.options.afterSendFn != null) && typeof _this.options.afterSendFn === 'function') {
            return _this.options.afterSendFn();
          }
        }
      };
      afterDomReady = function() {
        send();
        return _this.options.sendOnDomReady = false;
      };
      errorHandler = function(msg, url, line) {
        var errorObj;
        errorObj = {
          message: msg,
          url: url,
          line: line
        };
        _this.logger.push(errorObj);
        if ((_this.options.onErrorFn != null) && typeof _this.options.onErrorFn === 'function') {
          _this.options.onErrorFn(errorObj);
        }
        return !_this.options.propagateErrors;
      };
      this.init = function(options) {
        _this.options = $.extend({}, $.errorLogger.defaultOptions, options);
        _this.logger = selectLogger();
        window.onerror = errorHandler;
        if (_this.options.sendOnDomReady) {
          $(window).load(function() {
            return afterDomReady();
          });
        }
        return initSending();
      };
      return this.init(options);
    };
    $.errorLogger = function(options) {
      return new errorLogger(options);
    };
    return $.errorLogger.defaultOptions = {
      logger: null,
      propagateErrors: false,
      onErrorFn: null,
      beforeSendFn: null,
      afterSendFn: null,
      sendOnDomReady: true,
      sendDelay: 2000,
      debugLoggerOptions: {
        el: '#onErrors',
        displayEach: true
      },
      netLoggerOptions: {
        method: 'POST',
        url: '/errorlogger'
      }
    };
  })(jQuery);

}).call(this);
